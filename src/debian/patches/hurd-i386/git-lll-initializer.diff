Commited for 2.33

commit 059e60887b3244eb7ec0d764defe515fd525f513
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Sun Dec 13 10:16:55 2020 +0000

    hurd: Rename LLL_INITIALIZER to LLL_LOCK_INITIALIZER
    
    To get coherent with other ports.

diff --git a/hurd/setauth.c b/hurd/setauth.c
index 5493db5e5d..b1037172ba 100644
--- a/hurd/setauth.c
+++ b/hurd/setauth.c
@@ -24,7 +24,7 @@
 /* Things in the library which want to be run when the auth port changes.  */
 DEFINE_HOOK (_hurd_reauth_hook, (auth_t new_auth));
 
-static unsigned int reauth_lock = LLL_INITIALIZER;
+static unsigned int reauth_lock = LLL_LOCK_INITIALIZER;
 
 /* Set the auth port to NEW, and reauthenticate
    everything used by the library.  */
diff --git a/mach/lock-intern.h b/mach/lock-intern.h
index a68674cef4..62faf98039 100644
--- a/mach/lock-intern.h
+++ b/mach/lock-intern.h
@@ -31,7 +31,7 @@
 typedef unsigned int __spin_lock_t;
 
 /* Static initializer for spinlocks.  */
-#define __SPIN_LOCK_INITIALIZER   LLL_INITIALIZER
+#define __SPIN_LOCK_INITIALIZER   LLL_LOCK_INITIALIZER
 
 /* Initialize LOCK.  */
 
diff --git a/mach/lowlevellock.h b/mach/lowlevellock.h
index 6d92adca1c..cf67ccd589 100644
--- a/mach/lowlevellock.h
+++ b/mach/lowlevellock.h
@@ -32,7 +32,7 @@
 #endif
 
 /* Static initializer for low-level locks.  */
-#define LLL_INITIALIZER   0
+#define LLL_LOCK_INITIALIZER   0
 
 /* Wait on address PTR, without blocking if its contents
  * are different from VAL.  */
diff --git a/mach/mutex-init.c b/mach/mutex-init.c
index acacec2fb0..fc898f66d4 100644
--- a/mach/mutex-init.c
+++ b/mach/mutex-init.c
@@ -22,6 +22,6 @@
 void
 __mutex_init (void *lock)
 {
-  *(int *)lock = LLL_INITIALIZER;
+  *(int *)lock = LLL_LOCK_INITIALIZER;
 }
 libc_hidden_def (__mutex_init)
diff --git a/sysdeps/mach/libc-lock.h b/sysdeps/mach/libc-lock.h
index e04dcc445d..3993a57b26 100644
--- a/sysdeps/mach/libc-lock.h
+++ b/sysdeps/mach/libc-lock.h
@@ -57,13 +57,13 @@ typedef struct __libc_lock_recursive_opaque__ __libc_lock_recursive_t;
   CLASS __libc_lock_t NAME;
 
 /* Define an initialized lock variable NAME with storage class CLASS.  */
-#define _LIBC_LOCK_INITIALIZER LLL_INITIALIZER
+#define _LIBC_LOCK_INITIALIZER LLL_LOCK_INITIALIZER
 #define __libc_lock_define_initialized(CLASS,NAME) \
-  CLASS __libc_lock_t NAME = LLL_INITIALIZER;
+  CLASS __libc_lock_t NAME = LLL_LOCK_INITIALIZER;
 
 /* Initialize the named lock variable, leaving it in a consistent, unlocked
    state.  */
-#define __libc_lock_init(NAME) (NAME) = LLL_INITIALIZER
+#define __libc_lock_init(NAME) (NAME) = LLL_LOCK_INITIALIZER
 
 /* Finalize the named lock variable, which must be locked.  It cannot be
    used again until __libc_lock_init is called again on it.  This must be
@@ -86,7 +86,7 @@ typedef struct __libc_lock_recursive_opaque__ __libc_lock_recursive_t;
 #define __libc_lock_define_recursive(CLASS,NAME) \
   CLASS __libc_lock_recursive_t NAME;
 
-#define _LIBC_LOCK_RECURSIVE_INITIALIZER { LLL_INITIALIZER, 0, 0 }
+#define _LIBC_LOCK_RECURSIVE_INITIALIZER { LLL_LOCK_INITIALIZER, 0, 0 }
 
 #define __libc_lock_define_initialized_recursive(CLASS,NAME) \
   CLASS __libc_lock_recursive_t NAME = _LIBC_LOCK_RECURSIVE_INITIALIZER;
